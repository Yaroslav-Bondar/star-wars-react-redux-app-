{"ast":null,"code":"var _jsxFileName = \"/home/yaroslav/develop/web/apps/React/react-app/src/components/PersonPage/PersonFilms/PersonFilms.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { changeHTTP, makeConcurrentRequest } from '../../../utils/network';\nimport styles from './PersonFilms.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PersonFilms = _ref => {\n  _s();\n\n  let {\n    films\n  } = _ref;\n  const [filmsName, setFilmsName] = useState([]); // const responses = films.map(urlHttp => {\n  //     const urlHttps = changeHTTP(urlHttp);\n  //     return fetch(urlHttps);\n  // });\n  // console.log('films responses', responses);\n  // const res = Promise.all(responses.map(responses => responses.json()))\n  // .then(resp => resp.map(r => console.log(r.json().value)))\n  // console.log('res', res);\n\n  useEffect(() => {\n    (async () => {\n      const filmsHTTPS = films.map(url => changeHTTP(url));\n      const response = await makeConcurrentRequest(filmsHTTPS);\n      setFilmsName(response);\n      let respFilter = response.filter(film => film.title); // console.log('response PersonFilms', response);\n\n      console.log('response PersonFilms', respFilter);\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"PersonFilms:\", filmsName.length && filmsName.map((film, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white'\n      },\n      children: [\"$\", film.title]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 65\n    }, this)), films.map(film => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: film\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 32\n    }, this))]\n  }, void 0, true);\n};\n\n_s(PersonFilms, \"GbDQdJcEmLJRVqlcvnEIeWfiKwg=\");\n\n_c = PersonFilms;\nPersonFilms.propTypes = {\n  films: PropTypes.array\n};\nexport default PersonFilms;\n\nvar _c;\n\n$RefreshReg$(_c, \"PersonFilms\");","map":{"version":3,"sources":["/home/yaroslav/develop/web/apps/React/react-app/src/components/PersonPage/PersonFilms/PersonFilms.js"],"names":["useState","useEffect","PropTypes","changeHTTP","makeConcurrentRequest","styles","PersonFilms","films","filmsName","setFilmsName","filmsHTTPS","map","url","response","respFilter","filter","film","title","console","log","length","index","color","propTypes","array"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,UAAR,EAAoBC,qBAApB,QAAgD,wBAAhD;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;;;AAEA,MAAMC,WAAW,GAAG,QAAa;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C,CAD6B,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,YAAMS,UAAU,GAAGH,KAAK,CAACI,GAAN,CAAUC,GAAG,IAAIT,UAAU,CAACS,GAAD,CAA3B,CAAnB;AACA,YAAMC,QAAQ,GAAG,MAAMT,qBAAqB,CAACM,UAAD,CAA5C;AACAD,MAAAA,YAAY,CAACI,QAAD,CAAZ;AACA,UAAIC,UAAU,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,KAA7B,CAAjB,CAJS,CAKT;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCL,UAApC;AACH,KAPD;AAQH,GATQ,EASN,EATM,CAAT;AAUA,sBACI;AAAA,+BAEKN,SAAS,CAACY,MAAV,IAAoBZ,SAAS,CAACG,GAAV,CAAc,CAACK,IAAD,EAAOK,KAAP,kBAAiB;AAAiB,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAxB;AAAA,sBAA6CN,IAAI,CAACC,KAAlD;AAAA,OAAUI,KAAV;AAAA;AAAA;AAAA;AAAA,YAA/B,CAFzB,EAGKd,KAAK,CAACI,GAAN,CAAUK,IAAI,iBAAI;AAAA,gBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,YAAlB,CAHL;AAAA,kBADJ;AAOH,CA5BD;;GAAMV,W;;KAAAA,W;AA8BNA,WAAW,CAACiB,SAAZ,GAAwB;AACpBhB,EAAAA,KAAK,EAAEL,SAAS,CAACsB;AADG,CAAxB;AAIA,eAAelB,WAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {changeHTTP, makeConcurrentRequest} from '../../../utils/network';\nimport styles from './PersonFilms.module.css';\n\nconst PersonFilms = ({films}) => {\n    const [filmsName, setFilmsName] = useState([]);\n    // const responses = films.map(urlHttp => {\n    //     const urlHttps = changeHTTP(urlHttp);\n    //     return fetch(urlHttps);\n    // });\n    // console.log('films responses', responses);\n    // const res = Promise.all(responses.map(responses => responses.json()))\n    // .then(resp => resp.map(r => console.log(r.json().value)))\n\n    // console.log('res', res);\n    useEffect(() => {\n        (async () => {\n            const filmsHTTPS = films.map(url => changeHTTP(url));\n            const response = await makeConcurrentRequest(filmsHTTPS);\n            setFilmsName(response);\n            let respFilter = response.filter(film => film.title)\n            // console.log('response PersonFilms', response);\n            console.log('response PersonFilms', respFilter);\n        })();\n    }, []);\n    return (\n        <>\n            PersonFilms:\n            {filmsName.length && filmsName.map((film, index) => <div key={index} style={{color: 'white',}}>${film.title}</div>)}\n            {films.map(film => <span>{film}</span>)}\n        </>\n    );\n}\n\nPersonFilms.propTypes = {\n    films: PropTypes.array,\n}\n\nexport default PersonFilms;"]},"metadata":{},"sourceType":"module"}